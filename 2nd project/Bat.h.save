#ifndef BAT_H
#define BAT_H

#include "dragon.h"


class Bat : public Dragon
{
    public:
        Bat();
        bool isOnScreen;

        virtual void moveDragon();
    protected:
    private:
};

Bat::Bat()
{
    isOnScreen = false;
    //Load the dragon images
    std::ostringstream ss;          //stores the filenames for the dragon frames
    //ss = std::to_string(i);       //bug in MINGW so I'll use ostringstream
    for (int i=0; i < NO_OF_DRAGON_FRAMES; ++i){
    ss.clear();
    ss.str("");
    ss << "images/dragon/dragon" << i << ".png";
    dragon[i] = load_image( ss.str(), 0 );
            //    std::cout << "incarca dragon nr. " << i << '\n';
           //If there was a problem loading the dragon's img
        if( dragon[i] == nullptr ){
           fprintf(stderr, "\nUnable to load dragon image:  %s\n", IMG_GetError());
           printf("\nUnable to load dragon image:  %s\n", IMG_GetError());
           exit (136);
        }
    }
    //Set initial dragon position
    dragonBox.x =1050;
    dragonBox.y =350;
    //Set the dragon's dimentions
    dragonBox.w = DRAGON_WIDTH;
    dragonBox.h = DRAGON_HEIGHT;
    //Init the velocity
    xVel = 3;
    yVel = 5;
    //Init the starting dragon animation frame
    nextFrame = 0;
}

void Bat::moveDragon(){
    // Moves Bat inverse than the Dragon
    dragonBox.y -= yVel;
    isOnScreen = true;
    //move Bat on X axis
    dragonBox.x -= xVel;
    if ((dragonBox.y >= SCREEN_HEIGHT-DRAGON_HEIGHT) || (dragonBox.y <= 0) ) dragonBox.y += yVel;
    if (check_collision(dragonBox)
    if ( (dragonBox.x <= 0) ) {
            dragonBox.x = SCREEN_WIDTH-DRAGON_HEIGHT;
            isOnScreen = false;
    }

}

#endif // BAT_H
